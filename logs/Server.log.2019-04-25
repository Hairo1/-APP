2019-04-25 14:56:18,482 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 14:56:18,534 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 15:45:27,017 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 15:45:27,037 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 15:48:07,627 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 15:48:07,628 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:07,631 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:07,779 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2n5mewm1613s2p|1d6713dd, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2n5mewm1613s2p|1d6713dd, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 15:48:09,580 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 38
2019-04-25 15:48:09,784 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 15:48:09,784 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:09,785 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:09,835 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_title='测试33', a_pubDate=Thu Apr 18 16:38:58 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='数据结构'}, Articles{a_id=10033, a_title='测试32', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10034, a_title='测试35', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10032, a_title='测试31', a_pubDate=Thu Apr 18 16:38:15 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='HTML'}, Articles{a_id=10031, a_title='测试30', a_pubDate=Thu Apr 18 16:38:06 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10030, a_title='测试29', a_pubDate=Thu Apr 18 16:37:59 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10029, a_title='测试28', a_pubDate=Thu Apr 18 16:37:55 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10028, a_title='测试27', a_pubDate=Thu Apr 18 16:37:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10027, a_title='测试26', a_pubDate=Thu Apr 18 16:37:46 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10026, a_title='测试25', a_pubDate=Thu Apr 18 16:37:42 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10025, a_title='测试24', a_pubDate=Thu Apr 18 16:37:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10024, a_title='测试23', a_pubDate=Thu Apr 18 16:37:32 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10023, a_title='测试22', a_pubDate=Thu Apr 18 16:37:27 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10022, a_title='测试21', a_pubDate=Thu Apr 18 16:37:17 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 15:48:10,016 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 15:48:10,017 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:10,017 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:10,200 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 15:48:24,756 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 15:48:24,757 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:24,757 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:24,761 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 38
2019-04-25 15:48:24,774 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 15:48:24,775 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:24,775 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:24,796 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_title='测试33', a_pubDate=Thu Apr 18 16:38:58 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='数据结构'}, Articles{a_id=10033, a_title='测试32', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10034, a_title='测试35', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10032, a_title='测试31', a_pubDate=Thu Apr 18 16:38:15 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='HTML'}, Articles{a_id=10031, a_title='测试30', a_pubDate=Thu Apr 18 16:38:06 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10030, a_title='测试29', a_pubDate=Thu Apr 18 16:37:59 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10029, a_title='测试28', a_pubDate=Thu Apr 18 16:37:55 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10028, a_title='测试27', a_pubDate=Thu Apr 18 16:37:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10027, a_title='测试26', a_pubDate=Thu Apr 18 16:37:46 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10026, a_title='测试25', a_pubDate=Thu Apr 18 16:37:42 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10025, a_title='测试24', a_pubDate=Thu Apr 18 16:37:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10024, a_title='测试23', a_pubDate=Thu Apr 18 16:37:32 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10023, a_title='测试22', a_pubDate=Thu Apr 18 16:37:27 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10022, a_title='测试21', a_pubDate=Thu Apr 18 16:37:17 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 15:48:24,823 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 15:48:24,823 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:24,824 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:24,831 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 15:48:28,185 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 15:48:28,187 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:28,188 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:28,241 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 15:48:28,495 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 15:48:28,496 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:28,498 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:28,517 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 15:48:49,067 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 15:48:49,070 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:49,072 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:49,119 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 15:48:49,122 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 15:48:49,128 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:48:49,130 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:48:49,142 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 15:49:43,362 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 15:49:43,364 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:49:43,367 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:49:43,441 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 15:49:43,445 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 15:49:43,447 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:49:43,449 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:49:43,472 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 15:50:39,510 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 15:50:39,558 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 15:51:57,515 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 15:51:57,517 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:51:57,517 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:51:57,527 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 15:51:57,528 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 15:51:57,530 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 15:51:57,585 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2n5t41jyqbvej|2ae5bd34, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2n5t41jyqbvej|2ae5bd34, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 15:51:57,959 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 15:51:58,568 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 16:23:58,789 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 16:23:58,814 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 16:24:13,057 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 16:24:13,059 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:24:13,059 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:24:13,164 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2n6zyon1p03fdb|2ae5bd34, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2n6zyon1p03fdb|2ae5bd34, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 16:24:14,199 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 38
2019-04-25 16:24:14,346 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 16:24:14,351 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:24:14,352 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:24:14,370 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_title='测试33', a_pubDate=Thu Apr 18 16:38:58 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='数据结构'}, Articles{a_id=10033, a_title='测试32', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10034, a_title='测试35', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10032, a_title='测试31', a_pubDate=Thu Apr 18 16:38:15 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='HTML'}, Articles{a_id=10031, a_title='测试30', a_pubDate=Thu Apr 18 16:38:06 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10030, a_title='测试29', a_pubDate=Thu Apr 18 16:37:59 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10029, a_title='测试28', a_pubDate=Thu Apr 18 16:37:55 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10028, a_title='测试27', a_pubDate=Thu Apr 18 16:37:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10027, a_title='测试26', a_pubDate=Thu Apr 18 16:37:46 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10026, a_title='测试25', a_pubDate=Thu Apr 18 16:37:42 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10025, a_title='测试24', a_pubDate=Thu Apr 18 16:37:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10024, a_title='测试23', a_pubDate=Thu Apr 18 16:37:32 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10023, a_title='测试22', a_pubDate=Thu Apr 18 16:37:27 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10022, a_title='测试21', a_pubDate=Thu Apr 18 16:37:17 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 16:24:14,429 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:24:14,430 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:24:14,432 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:24:14,596 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:24:25,108 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 16:24:25,112 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:24:25,114 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:24:25,136 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.NullPointerException
2019-04-25 16:24:57,628 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:24:57,630 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:24:57,633 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:24:57,648 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:25:00,281 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 16:25:00,283 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:25:00,284 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:25:00,374 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 16:25:00,459 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:25:00,460 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:25:00,461 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:25:00,476 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:27:55,946 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:27:55,947 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:27:55,948 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 16:27:55,948 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:27:55,948 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:27:55,949 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:27:55,954 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:27:55,959 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 16:33:42,065 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 16:33:42,065 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:33:42,066 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:33:42,113 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 16:33:42,215 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:33:42,216 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:33:42,217 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:33:42,237 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:36:13,561 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 16:36:13,562 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:36:13,563 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:36:13,606 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 16:36:13,666 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:36:13,667 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:36:13,668 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:36:13,677 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:36:36,548 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 16:36:36,550 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:36:36,551 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:36:36,576 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 16:36:36,689 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:36:36,689 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:36:36,690 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:36:36,697 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:36:55,219 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 16:36:55,220 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:36:55,221 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:36:55,267 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 16:36:55,444 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:36:55,445 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:36:55,446 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:36:55,454 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:37:17,722 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 16:37:17,724 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:37:17,726 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:37:17,750 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 16:37:17,932 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:37:17,933 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:37:17,933 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:37:17,938 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:37:36,162 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 16:37:36,163 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 16:37:36,163 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:37:36,164 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 16:37:36,164 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:37:36,164 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 16:37:36,174 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 16:37:36,189 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:26:06,489 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 17:26:06,527 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 17:26:40,225 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:26:40,227 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:26:40,227 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:26:40,285 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2n97v05ilkm7x|4fedf908, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2n97v05ilkm7x|4fedf908, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 17:26:41,451 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:27:54,843 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:27:54,845 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:27:54,845 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:27:54,858 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:28:22,772 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:28:22,774 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:28:22,775 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:28:22,790 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:28:22,919 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:28:22,921 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:28:22,923 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:28:22,925 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:28:22,925 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:28:22,927 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:28:23,071 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:28:23,087 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 17:28:28,538 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:28:28,539 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:28:28,539 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:28:28,551 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:28:28,676 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:28:28,681 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:28:28,682 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:28:28,684 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:28:28,686 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:28:28,686 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:28:28,692 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:28:28,696 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 17:31:05,780 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:31:05,781 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:31:05,780 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:31:05,782 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:31:05,781 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:31:05,783 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:31:05,782 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:31:05,784 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:31:05,783 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:31:05,803 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:31:05,850 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:31:05,863 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 17:31:45,015 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:31:45,016 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:31:45,017 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:31:45,055 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:31:45,166 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:31:45,168 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:31:45,169 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:31:45,171 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:31:45,178 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:31:45,180 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:31:45,183 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:31:45,190 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 17:33:16,641 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:33:16,641 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:33:16,642 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:33:16,693 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:33:16,857 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:33:16,857 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:33:16,858 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:33:16,873 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:33:16,875 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:33:16,875 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:33:16,875 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:33:16,890 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 17:33:50,158 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:33:50,160 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:33:50,161 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:33:50,195 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:33:50,360 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:33:50,361 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:33:50,361 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:33:50,362 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:33:50,363 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:33:50,365 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:33:50,369 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:33:50,374 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 17:34:17,695 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:34:17,696 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:34:17,696 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:34:17,698 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:34:17,698 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:34:17,699 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:34:17,707 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:34:17,708 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:34:17,709 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:34:17,709 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:34:17,723 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:34:17,754 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 17:35:22,220 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:35:22,223 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:35:22,224 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:35:22,233 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:35:22,358 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:35:22,359 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:35:22,359 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:35:22,363 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:35:22,365 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:35:22,361 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:35:22,371 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 17:35:22,375 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:37:04,326 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 17:37:04,346 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 17:37:29,051 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:37:29,051 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:37:29,051 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:37:29,052 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:37:29,052 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:37:29,052 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:37:29,059 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:37:29,060 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:37:29,061 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:37:29,107 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2n9lyl014pe5d4|21090c88, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2n9lyl014pe5d4|21090c88, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 17:37:29,451 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:37:29,980 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:37:29,984 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 17:37:31,236 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:37:31,238 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:37:31,239 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:37:31,246 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:37:31,355 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:37:31,358 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:37:31,358 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:37:31,360 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:37:31,360 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:37:31,360 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:37:31,373 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 17:37:31,374 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:42:05,366 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 17:42:05,383 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 17:42:18,369 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 17:42:18,369 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:42:18,369 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:42:18,433 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2n9sev7ruby9h|43e8f1c, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2n9sev7ruby9h|43e8f1c, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 17:42:19,584 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 38
2019-04-25 17:42:19,726 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 17:42:19,727 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:42:19,728 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:42:19,778 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_title='测试33', a_pubDate=Thu Apr 18 16:38:58 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='数据结构'}, Articles{a_id=10033, a_title='测试32', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10034, a_title='测试35', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10032, a_title='测试31', a_pubDate=Thu Apr 18 16:38:15 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='HTML'}, Articles{a_id=10031, a_title='测试30', a_pubDate=Thu Apr 18 16:38:06 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10030, a_title='测试29', a_pubDate=Thu Apr 18 16:37:59 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10029, a_title='测试28', a_pubDate=Thu Apr 18 16:37:55 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10028, a_title='测试27', a_pubDate=Thu Apr 18 16:37:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10027, a_title='测试26', a_pubDate=Thu Apr 18 16:37:46 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10026, a_title='测试25', a_pubDate=Thu Apr 18 16:37:42 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10025, a_title='测试24', a_pubDate=Thu Apr 18 16:37:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10024, a_title='测试23', a_pubDate=Thu Apr 18 16:37:32 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10023, a_title='测试22', a_pubDate=Thu Apr 18 16:37:27 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10022, a_title='测试21', a_pubDate=Thu Apr 18 16:37:17 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 17:42:19,800 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:42:19,801 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:42:19,801 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:42:19,803 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:42:19,805 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:42:19,809 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:42:19,867 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:42:19,885 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 17:45:51,110 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:45:51,111 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:45:51,112 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:45:51,124 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:45:51,154 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:45:51,155 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:45:51,156 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:45:51,156 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:45:51,159 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:45:51,160 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:45:51,167 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:45:51,171 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 17:46:46,334 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:46:46,335 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:46:46,336 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:46:46,347 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:46:46,469 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:46:46,470 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:46:46,470 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:46:46,475 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:46:46,481 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:46:46,482 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:46:46,485 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:46:46,492 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 17:48:31,842 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 17:48:31,862 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 17:48:42,793 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:48:42,797 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:48:42,797 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:48:42,793 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:48:42,799 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:48:42,800 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:48:42,809 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:48:42,810 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:48:42,810 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:48:42,891 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2na0p2p1h24lxv|14be750c, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2na0p2p1h24lxv|14be750c, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 17:48:43,280 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:48:43,853 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:48:43,858 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 17:50:07,580 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:50:07,597 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:50:07,598 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:50:07,610 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:50:07,706 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:50:07,707 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:50:07,707 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:50:07,709 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:50:07,709 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:50:07,710 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:50:07,721 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:50:07,735 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 17:57:54,999 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 17:57:55,022 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 17:58:24,723 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:58:24,723 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:58:24,724 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:58:24,724 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:58:24,725 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:58:24,725 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:58:24,733 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:58:24,734 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:58:24,735 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:58:24,788 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nacrm012n8t5h|7d284f15, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nacrm012n8t5h|7d284f15, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 17:58:25,101 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:58:25,611 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:58:25,616 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 17:58:26,876 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 17:58:26,887 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:58:26,888 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:58:26,894 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 17:58:26,982 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 17:58:26,982 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 17:58:26,986 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:58:26,986 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:58:26,984 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 17:58:26,987 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 17:58:26,994 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 17:58:26,999 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:01:30,242 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:01:30,249 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:01:30,250 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:01:30,273 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:01:30,558 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:01:30,559 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:01:30,559 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:01:30,572 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:01:30,589 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:01:30,592 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:01:30,593 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:01:30,606 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:01:51,096 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:01:51,097 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:01:51,098 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:01:51,114 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:01:51,209 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:01:51,210 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:01:51,211 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:01:51,215 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:01:51,216 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:01:51,217 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:01:51,219 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:01:51,227 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:03:26,487 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:03:26,507 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:03:44,514 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:03:44,514 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:03:44,515 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:03:44,515 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:03:44,518 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:03:44,517 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:03:44,530 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:03:44,530 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:03:44,531 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:03:44,607 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2najvdx180ffc0|4b5ad306, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2najvdx180ffc0|4b5ad306, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:03:45,013 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:03:45,558 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:03:45,562 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 18:04:01,552 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:04:01,562 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:04:01,563 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:04:01,576 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:04:01,667 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:04:01,669 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:04:01,670 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:04:01,670 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:04:01,672 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:04:01,673 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:04:01,681 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:04:01,694 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:05:02,702 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:05:02,726 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:05:17,996 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:05:17,998 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:05:17,996 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:05:17,999 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:05:17,999 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:05:18,001 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:05:18,008 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:05:18,008 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:05:18,009 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:05:18,055 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nalxmo1wpiykg|6a5dd083, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nalxmo1wpiykg|6a5dd083, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:05:18,356 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:05:18,918 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.NullPointerException
2019-04-25 18:05:18,930 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:06:20,883 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:06:20,905 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:06:27,453 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:06:27,453 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:06:27,454 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:06:27,455 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:06:27,455 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:06:27,455 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:06:27,464 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:06:27,464 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:06:27,465 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:06:27,512 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nanlybq4fgcj|48a46b0f, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nanlybq4fgcj|48a46b0f, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:06:27,811 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:06:28,311 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.NullPointerException
2019-04-25 18:06:28,327 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:08:25,004 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:08:25,007 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:08:25,009 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:08:25,034 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:08:25,110 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:08:25,112 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:08:25,110 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:08:25,113 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:08:25,115 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:08:25,116 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:08:25,126 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.NullPointerException
2019-04-25 18:08:25,128 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:09:12,775 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:09:12,776 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:09:12,777 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:09:12,831 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:09:12,961 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:09:12,961 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:09:12,961 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:09:12,963 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:09:12,963 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:09:12,965 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:09:12,973 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.NullPointerException
2019-04-25 18:09:12,976 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:11:59,035 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:11:59,038 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:11:59,040 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:11:59,038 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:11:59,038 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:11:59,041 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:11:59,041 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:11:59,042 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:11:59,042 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:11:59,048 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:11:59,066 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:11:59,091 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 18:12:13,278 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:12:13,279 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:12:13,280 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:12:13,288 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:12:13,435 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:12:13,436 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:12:13,437 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:12:13,437 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:12:13,438 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:12:13,439 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:12:13,446 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:12:13,449 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:13:15,012 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:13:15,013 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:13:15,013 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:13:15,027 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:13:15,124 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:13:15,125 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:13:15,125 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:13:15,127 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:13:15,128 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:13:15,130 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:13:15,136 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:13:15,155 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 18:16:18,964 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:16:18,984 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:16:37,489 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:16:37,489 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:16:37,490 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:16:37,489 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:16:37,491 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:16:37,491 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:16:37,502 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:16:37,502 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:16:37,502 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:16:37,555 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nb0ffm1i7kaez|308e87a1, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nb0ffm1i7kaez|308e87a1, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:16:37,926 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:16:38,496 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:16:38,499 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:22:18,225 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:22:18,246 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:22:25,759 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:22:25,759 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:22:25,760 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:22:25,761 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:22:25,761 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:22:25,761 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:22:25,771 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:22:25,771 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:22:25,771 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:22:25,824 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nb84n31dwd4xm|340c5fb6, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nb84n31dwd4xm|340c5fb6, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:22:26,144 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:22:26,658 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:22:26,662 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:26:22,262 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:26:22,263 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:26:22,264 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:26:22,262 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:26:22,266 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:26:22,264 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:26:22,266 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:26:22,266 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:26:22,267 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:26:22,276 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:26:22,311 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:26:22,319 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:29:32,707 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:29:32,726 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:29:47,857 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:29:47,857 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:29:47,858 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:29:47,858 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:29:47,859 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:29:47,859 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:29:47,868 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:29:47,868 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:29:47,869 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:29:47,916 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nbhfw01f2mzoo|f03ee8f, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nbhfw01f2mzoo|f03ee8f, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:29:48,228 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:29:48,751 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:29:48,761 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:31:38,954 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:31:38,967 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:31:38,968 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:31:38,974 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:31:39,206 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:31:39,208 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:31:39,208 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:31:39,213 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:31:39,222 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:31:39,223 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:31:39,224 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:31:39,229 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:32:20,875 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:32:20,894 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:32:40,464 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:32:40,464 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:32:40,468 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:32:40,466 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:32:40,468 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:32:40,468 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:32:40,482 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:32:40,482 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:32:40,483 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:32:40,562 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nbl1ndxsaokq|4f235e8e, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nbl1ndxsaokq|4f235e8e, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:32:40,935 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:32:41,484 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:32:41,488 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:36:14,027 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:36:14,052 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:36:21,124 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:36:21,125 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:36:21,124 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:36:21,125 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:36:21,126 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:36:21,127 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:36:21,133 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:36:21,134 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:36:21,134 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:36:21,189 INFO [http-nio-8080-exec-8] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nbq1jt8uixee|456aa471, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nbq1jt8uixee|456aa471, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:36:21,527 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:36:22,089 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:36:22,095 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:37:55,211 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:37:55,235 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:38:01,363 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:38:01,363 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:38:01,365 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:38:01,365 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:38:01,366 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:38:01,366 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:38:01,379 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:38:01,380 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:38:01,381 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:38:01,452 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nbs7mk105yb64|7d284f15, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nbs7mk105yb64|7d284f15, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:38:01,802 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:38:02,329 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:38:02,332 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:38:35,516 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:38:35,532 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:38:35,533 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:38:35,559 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:38:35,649 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:38:35,649 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:38:35,650 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:38:35,651 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:38:35,652 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:38:35,653 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:38:35,658 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:38:35,682 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:39:34,001 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:39:34,004 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:39:34,012 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:39:34,013 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:39:34,014 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:39:34,015 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:39:34,001 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:39:34,017 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:39:34,017 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:39:34,027 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:39:34,054 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:39:34,060 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:39:50,577 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:39:50,577 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:39:50,577 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:39:50,578 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:39:50,580 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:39:50,581 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:39:50,582 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:39:50,582 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:39:50,583 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:39:50,591 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:39:50,614 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 18:39:50,625 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 18:56:13,347 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 18:56:13,365 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 18:56:25,500 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 18:56:25,500 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 18:56:25,501 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:56:25,501 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:56:25,502 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:56:25,502 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:56:25,511 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 18:56:25,511 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 18:56:25,512 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 18:56:25,566 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2ncfqy8sutlxl|677cc4e8, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2ncfqy8sutlxl|677cc4e8, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 18:56:25,878 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 18:56:26,435 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 18:56:26,452 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.ClassCastException
2019-04-25 19:00:10,662 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 19:00:10,682 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 19:00:20,995 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:00:20,995 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:00:20,996 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:00:20,996 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:00:20,997 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:00:20,997 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:00:21,004 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:00:21,004 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:00:21,004 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:00:21,050 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2ncku2c4ucq1w|1a17dd6f, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2ncku2c4ucq1w|1a17dd6f, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 19:00:21,385 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:00:21,998 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 19:00:22,010 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.ClassCastException
2019-04-25 19:02:48,365 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 19:02:48,384 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 19:02:59,878 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:02:59,879 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:02:59,879 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:02:59,880 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:02:59,881 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:02:59,881 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:02:59,888 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:02:59,889 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:02:59,889 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:02:59,938 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nco7qyx8xhl3|1b47b7f5, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nco7qyx8xhl3|1b47b7f5, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 19:03:00,293 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:03:00,810 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 19:03:00,812 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.ClassCastException
2019-04-25 19:04:18,874 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 19:04:18,896 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 19:04:25,312 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:04:25,312 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:04:25,313 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:04:25,313 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:04:25,313 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:04:25,313 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:04:25,321 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:04:25,322 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:04:25,322 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:04:25,377 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2ncq5l538d5by|15994b0b, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2ncq5l538d5by|15994b0b, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 19:04:25,707 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:04:26,213 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 19:04:26,231 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [B@873658c
2019-04-25 19:05:22,793 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:05:22,798 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:05:22,799 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:05:22,831 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 19:05:22,948 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:05:22,949 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:05:22,950 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:05:22,950 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:05:22,954 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:05:22,955 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:05:22,960 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:05:23,007 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [B@b3abb11
2019-04-25 19:05:47,367 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:05:47,368 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:05:47,367 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:05:47,368 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:05:47,368 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:05:47,369 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:05:47,369 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:05:47,370 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:05:47,370 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:05:47,376 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [B@4ebd0c10
2019-04-25 19:05:47,377 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 19:05:47,378 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:07:09,061 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 19:07:09,081 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 19:07:16,454 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:07:16,454 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:07:16,455 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:07:16,455 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:07:16,456 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:07:16,456 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:07:16,464 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:07:16,464 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:07:16,464 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:07:16,516 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nctswkwsayuf|1999149e, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nctswkwsayuf|1999149e, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 19:07:16,857 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:07:17,360 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 :                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 19:07:17,362 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 19:07:30,459 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:07:30,471 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:07:30,472 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:07:30,498 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 19:07:30,592 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:07:30,594 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:07:30,595 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:07:30,594 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:07:30,597 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:07:30,597 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:07:30,602 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:07:30,626 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 :                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 19:08:06,053 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:08:06,054 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:08:06,055 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:08:06,061 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 19:08:07,072 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:08:07,074 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:08:07,072 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:08:07,074 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:08:07,074 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:08:07,076 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:08:07,083 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:08:07,083 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 :                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 19:35:19,447 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 19:35:19,468 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 19:35:28,177 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:35:28,177 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:35:28,179 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:35:28,180 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:35:28,181 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:35:28,181 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:35:28,195 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:35:28,196 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:35:28,197 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:35:28,276 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2ndu17qi1qvgw|40016ce1, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2ndu17qi1qvgw|40016ce1, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 19:35:28,712 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:35:29,241 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 19:35:29,251 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 :                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 19:35:47,552 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:35:47,573 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:35:47,573 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:35:47,588 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 19:35:49,138 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:35:49,142 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:35:49,143 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:35:49,142 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:35:49,146 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:35:49,147 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:35:49,151 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:35:49,159 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 :                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 19:54:27,219 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 19:54:27,243 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 19:54:49,877 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 19:54:49,877 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:54:49,878 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:54:49,958 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2neimu91f9thqq|3a3ad8e7, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2neimu91f9thqq|3a3ad8e7, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 19:54:51,140 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 38
2019-04-25 19:54:51,310 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 19:54:51,312 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:54:51,312 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:54:51,394 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:54:51,395 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:54:51,395 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:54:51,400 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:54:51,402 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:54:51,402 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:54:51,415 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_title='测试33', a_pubDate=Thu Apr 18 16:38:58 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='数据结构'}, Articles{a_id=10033, a_title='测试32', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10034, a_title='测试35', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10032, a_title='测试31', a_pubDate=Thu Apr 18 16:38:15 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='HTML'}, Articles{a_id=10031, a_title='测试30', a_pubDate=Thu Apr 18 16:38:06 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10030, a_title='测试29', a_pubDate=Thu Apr 18 16:37:59 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10029, a_title='测试28', a_pubDate=Thu Apr 18 16:37:55 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10028, a_title='测试27', a_pubDate=Thu Apr 18 16:37:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10027, a_title='测试26', a_pubDate=Thu Apr 18 16:37:46 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10026, a_title='测试25', a_pubDate=Thu Apr 18 16:37:42 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10025, a_title='测试24', a_pubDate=Thu Apr 18 16:37:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10024, a_title='测试23', a_pubDate=Thu Apr 18 16:37:32 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10023, a_title='测试22', a_pubDate=Thu Apr 18 16:37:27 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10022, a_title='测试21', a_pubDate=Thu Apr 18 16:37:17 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 19:54:51,462 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:54:51,471 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 19:57:24,554 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 19:57:24,576 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 19:57:31,896 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 19:57:31,897 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:57:31,898 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:57:31,995 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nemfo9r5opu5|60c96eb4, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nemfo9r5opu5|60c96eb4, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 19:57:33,090 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 38
2019-04-25 19:57:33,228 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 19:57:33,228 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:57:33,229 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:57:33,276 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:57:33,277 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:57:33,277 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:57:33,278 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_title='测试33', a_pubDate=Thu Apr 18 16:38:58 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='数据结构'}, Articles{a_id=10033, a_title='测试32', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10034, a_title='测试35', a_pubDate=Thu Apr 18 16:38:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JQUERY'}, Articles{a_id=10032, a_title='测试31', a_pubDate=Thu Apr 18 16:38:15 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='HTML'}, Articles{a_id=10031, a_title='测试30', a_pubDate=Thu Apr 18 16:38:06 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10030, a_title='测试29', a_pubDate=Thu Apr 18 16:37:59 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10029, a_title='测试28', a_pubDate=Thu Apr 18 16:37:55 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10028, a_title='测试27', a_pubDate=Thu Apr 18 16:37:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10027, a_title='测试26', a_pubDate=Thu Apr 18 16:37:46 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10026, a_title='测试25', a_pubDate=Thu Apr 18 16:37:42 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10025, a_title='测试24', a_pubDate=Thu Apr 18 16:37:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10024, a_title='测试23', a_pubDate=Thu Apr 18 16:37:32 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10023, a_title='测试22', a_pubDate=Thu Apr 18 16:37:27 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10022, a_title='测试21', a_pubDate=Thu Apr 18 16:37:17 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 19:57:33,278 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:57:33,279 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:57:33,281 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:57:33,343 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:57:33,356 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.core.convert.ConversionFailedException
2019-04-25 19:58:32,759 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 19:58:32,779 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 19:59:16,050 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 19:59:16,051 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 19:59:16,053 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:59:16,054 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:59:16,055 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:59:16,055 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:59:16,069 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 19:59:16,070 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 19:59:16,070 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 19:59:16,129 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nenwatp2x6vk|701d2b59, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nenwatp2x6vk|701d2b59, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 19:59:16,467 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 19:59:17,047 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.core.convert.ConversionFailedException
2019-04-25 19:59:17,053 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 20:00:18,544 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 20:00:18,564 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 20:00:25,944 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 20:00:25,944 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 20:00:25,945 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 20:00:25,946 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 20:00:25,946 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 20:00:25,946 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 20:00:25,957 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 20:00:25,959 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 20:00:25,959 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 20:00:26,021 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2neq5xaf9s1z5|48cf8414, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2neq5xaf9s1z5|48cf8414, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 20:00:26,345 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 20:00:26,908 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 :                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10001, a_title='海羅测试1号', a_pubDate=Thu Apr 11 13:37:12 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅1号', a_browseCount=22, a_commentCount=0, a_likeCount=0, l_name='设计模式'}, Articles{a_id=10002, a_title='Spring、SpringMVC和 Springboot的区别', a_pubDate=Wed Apr 17 14:36:45 CST 2019, a_content='## Spring、SpringMVC和 Springboot的区别

spring boot就是一个大框架里面包含了许许多多的东西，其中spring就是最核心的内容之一，当然就包含spring mvc。

spring mvc 是只是spring 处理web层请求的一个模块。


因此他们的关系大概就是这样：

spring mvc < spring <springboot。
 

spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经很庞大了，作为一个开发者，如果想要使用 spring 家族一系列的技术，需要一个一个的搞配置，然后还有个版本兼容性问题，其实挺麻烦的，偶尔也会有小坑出现，其实蛮影响开发进度， spring boot 就是来解决这个问题，提供了一个解决方案吧，可以先不关心如何配置，可以快速的启动开发，进行业务逻辑编写，各种需要的技术，加入 starter 就配置好了，直接使用，可以说追求开箱即用的效果吧.

 

spring 框架有超多的延伸产品例如 boot security jpa etc... 但它的基础就是 spring 的 ioc 和 aop ioc 提供了依赖注入的容器 aop 解决了面向横切面的编程 然后在此两者的基础上实现了其他延伸产品的高级功能 Spring MVC 呢是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题 因为 Spring 的配置太复杂了 各种 XML JavaConfig hin 麻烦 于是懒人改变世界推出了 Spring boot 约定优于配置 简化了 spring 的配置流程.

 

Spring 最初利用“工厂模式”（ DI ）和“代理模式”（ AOP ）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC 框架（一些用 Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都要搞很多依赖，写很多样板代码很麻烦，于是搞了一些懒人整合包（ starter ），这套就是 Spring Boot 。', u_name='18711577', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10003, a_title='测试1', a_pubDate=Thu Apr 18 16:35:16 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10004, a_title='测试2', a_pubDate=Thu Apr 18 16:35:29 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10005, a_title='测试3', a_pubDate=Thu Apr 18 16:35:36 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10006, a_title='测试4', a_pubDate=Thu Apr 18 16:35:45 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}, Articles{a_id=10007, a_title='测试5', a_pubDate=Thu Apr 18 16:35:50 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='JAVA'}]
2019-04-25 20:00:26,915 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 21:18:20,596 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 21:18:20,641 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 21:22:09,819 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 21:22:09,856 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 21:23:11,959 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 21:23:11,959 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 21:23:11,961 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 21:23:11,961 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 21:23:11,961 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 21:23:11,961 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 21:23:11,975 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 21:23:11,976 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 21:23:11,977 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 21:23:12,039 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nhnfhz1f8hr7s|677cc4e8, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nhnfhz1f8hr7s|677cc4e8, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 21:23:12,478 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 21:23:13,188 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 21:23:13,211 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : null
2019-04-25 21:25:34,121 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 21:25:34,140 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 21:25:41,798 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 21:25:41,798 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 21:25:41,800 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 21:25:41,800 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 21:25:41,801 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 21:25:41,801 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 21:25:41,812 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 21:25:41,812 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 21:25:41,812 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 21:25:41,883 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nhrt4mm1kr9z|49190ed6, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nhrt4mm1kr9z|49190ed6, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 21:25:42,107 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 21:25:42,221 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 21:25:42,837 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : null
2019-04-25 21:38:42,012 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 21:38:42,039 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 21:38:56,354 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 21:38:56,354 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 21:38:56,355 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 21:38:56,355 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 21:38:56,356 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 21:38:56,356 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 21:38:56,363 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 21:38:56,364 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 21:38:56,364 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 21:38:56,418 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2ni8p2o123fgoc|67c21bf, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2ni8p2o123fgoc|67c21bf, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 21:38:56,685 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 21:38:56,792 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 21:38:57,718 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.RedisConnectionFailureException
2019-04-25 22:24:40,959 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 22:24:41,080 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 22:25:14,200 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:25:14,202 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:25:14,202 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:25:14,202 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:25:14,204 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:25:14,205 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:25:14,203 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:25:14,204 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:25:14,211 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:25:14,317 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2njvtyl1gk5wzs|c262f2f, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2njvtyl1gk5wzs|c262f2f, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 22:25:14,713 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:25:15,250 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 22:25:15,317 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:25:37,704 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:25:37,708 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:25:37,709 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:25:37,812 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:25:37,813 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:25:37,813 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:25:37,813 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:25:37,813 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:25:37,815 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:25:37,817 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.ClassCastException
2019-04-25 22:25:37,820 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:25:37,822 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:31:25,168 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 22:31:25,187 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 22:31:40,607 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:31:40,608 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:31:40,607 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:31:40,609 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:31:40,609 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:31:40,611 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:31:40,622 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:31:40,623 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:31:40,623 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:31:40,678 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nk4hrx1i3m6pq|18715bb, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nk4hrx1i3m6pq|18715bb, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 22:31:41,099 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:31:42,103 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 22:31:42,122 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:31:58,309 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:31:58,329 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:31:58,329 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:31:58,382 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 22:31:59,997 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:31:59,998 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:31:59,998 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:31:59,998 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:32:00,000 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:32:00,001 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:32:00,004 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:32:00,007 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:42:20,943 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 22:42:20,963 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 22:42:56,534 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 22:42:56,535 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:42:56,535 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:42:56,642 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nkijrx12i7qiu|701d2b59, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nkijrx12i7qiu|701d2b59, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 22:42:57,992 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 22:42:58,197 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 22:42:58,199 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:42:58,200 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:42:58,214 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 22:42:58,330 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:42:58,331 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:42:58,331 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:42:58,332 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:42:58,333 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:42:58,337 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:42:58,382 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:42:58,486 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:45:35,346 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 22:45:35,374 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 22:45:46,475 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:45:46,477 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:45:46,475 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:45:46,477 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:45:46,477 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:45:46,478 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:45:46,492 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:45:46,492 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:45:46,493 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:45:46,542 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nkmps6seskcd|70c491b8, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nkmps6seskcd|70c491b8, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 22:45:46,893 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:45:47,422 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 22:45:47,429 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:45:50,433 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:45:50,437 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:45:50,437 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:45:50,445 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 22:45:50,536 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:45:50,537 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:45:50,538 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:45:50,538 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:45:50,540 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:45:50,541 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:45:50,546 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:45:50,547 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:46:23,165 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:46:23,166 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:46:23,166 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:46:23,184 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 22:46:23,269 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:46:23,270 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:46:23,271 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:46:23,271 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:46:23,273 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:46:23,274 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:46:23,281 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:46:23,299 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:48:25,474 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 22:48:25,493 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 22:48:34,500 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:48:34,500 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:48:34,501 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:48:34,502 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:48:34,502 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:48:34,502 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:48:34,511 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:48:34,511 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:48:34,512 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:48:34,561 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nkqd1s1vhl8a9|ad0bb4e, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nkqd1s1vhl8a9|ad0bb4e, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 22:48:34,872 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:48:35,363 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class java.lang.NullPointerException
2019-04-25 22:48:35,377 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 22:50:01,410 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 22:50:01,430 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 22:50:08,285 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:50:08,285 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:50:08,286 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:50:08,287 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:50:08,287 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:50:08,287 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:50:08,295 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:50:08,295 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:50:08,296 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:50:08,344 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nksf2no56gej|44864536, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nksf2no56gej|44864536, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 22:50:08,722 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:50:09,246 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 22:50:09,264 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:50:27,203 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:50:27,206 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:50:27,207 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:50:27,222 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 22:50:27,306 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:50:27,307 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:50:27,308 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:50:27,309 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:50:27,312 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:50:27,313 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:50:27,319 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:50:27,342 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 22:57:12,861 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 22:57:12,880 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 22:57:24,956 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 22:57:24,956 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 22:57:24,958 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:57:24,958 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:57:24,959 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:57:24,959 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:57:24,967 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 22:57:24,967 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 22:57:24,967 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 22:57:25,019 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nl1nze1l6pfpd|14be750c, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nl1nze1l6pfpd|14be750c, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 22:57:25,329 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 22:57:25,832 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 22:57:25,832 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : null
2019-04-25 22:59:47,976 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 22:59:47,995 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 23:00:02,762 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:00:02,762 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:00:02,764 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:00:02,764 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:00:02,765 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:00:02,765 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:00:02,773 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:00:02,773 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:00:02,773 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:00:02,828 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nl4zo51odgwdk|6f3b13d0, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nl4zo51odgwdk|6f3b13d0, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 23:00:03,167 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:00:03,689 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 23:00:03,695 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 23:01:42,092 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:01:42,111 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:01:42,112 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:01:42,121 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 23:01:42,229 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:01:42,230 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:01:42,231 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:01:42,233 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:01:42,235 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:01:42,236 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:01:42,238 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:01:42,242 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 23:01:59,150 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:01:59,152 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:01:59,153 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:01:59,181 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 23:01:59,380 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:01:59,381 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:01:59,381 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:01:59,404 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:01:59,408 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:01:59,409 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:01:59,418 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:01:59,454 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 23:03:18,043 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 23:03:18,062 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 23:03:40,366 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:03:40,368 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:03:40,368 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:03:40,366 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:03:40,369 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:03:40,370 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:03:40,377 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:03:40,378 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:03:40,378 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:03:40,435 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nl9hrc7vyrck|7e2bc2f4, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nl9hrc7vyrck|7e2bc2f4, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 23:03:40,771 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:03:41,390 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 23:03:41,423 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : null
2019-04-25 23:04:01,045 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:04:01,060 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:04:01,061 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:04:01,065 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 23:04:02,106 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:04:02,107 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:04:02,108 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:04:02,108 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:04:02,109 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:04:02,109 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:04:02,115 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:04:02,121 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 23:08:19,174 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:08:19,174 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:08:19,174 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:08:19,176 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:08:19,175 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:08:19,176 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:08:19,178 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:08:19,176 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:08:19,177 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:08:19,185 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 23:08:19,188 INFO [http-nio-8080-exec-10] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 23:08:19,198 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:08:59,369 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:08:59,370 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:08:59,371 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:08:59,376 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.mybatis.spring.MyBatisSystemException
2019-04-25 23:09:00,530 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:09:00,531 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:09:00,531 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:09:00,532 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:09:00,532 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:09:00,533 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:09:00,540 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.throwing(62) | 抛出的异常是:class org.springframework.data.redis.serializer.SerializationException
2019-04-25 23:09:00,543 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:09:19,113 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 23:09:19,135 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 23:09:26,164 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:09:26,164 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:09:26,165 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:09:26,166 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:09:26,166 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:09:26,166 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:09:26,174 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:09:26,174 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:09:26,175 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:09:26,222 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nlh8d31lb8rg6|56c42964, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nlh8d31lb8rg6|56c42964, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 23:09:26,531 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:09:27,076 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan(value=”com.Hairo.mappers”)//扫描mapper包
@EnableAutoConfiguration//自动载入应用程序所需的所有Bean，当使用Exclude这个属性时，是禁止自动配置某个类
public class HairoApplication {
public static void main(String[] args) {
SpringApplication.run(HairoApplication.class, args);
}

}
```', u_name='海羅', a_browseCount=122, a_commentCount=0, a_likeCount=0, l_name='JAVA'}
2019-04-25 23:09:27,082 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : null
2019-04-25 23:18:14,654 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 23:18:14,675 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 23:18:41,101 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:18:41,102 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:18:41,101 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:18:41,102 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:18:41,103 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:18:41,104 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:18:41,113 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:18:41,114 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:18:41,114 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:18:41,168 INFO [http-nio-8080-exec-3] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nlspla10ntbeo|22c8ee48, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nlspla10ntbeo|22c8ee48, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 23:18:41,569 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:18:42,122 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:18:42,131 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:19:43,256 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:19:43,273 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:19:43,273 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:19:43,283 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:19:43,388 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:19:43,389 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:19:43,389 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:19:43,390 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:19:43,389 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:19:43,391 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:19:43,398 INFO [http-nio-8080-exec-8] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:19:43,400 INFO [http-nio-8080-exec-9] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:22:04,809 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 23:22:04,828 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 23:22:11,178 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:22:11,178 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:22:11,179 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:22:11,179 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:22:11,180 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:22:11,179 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:22:11,194 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:22:11,195 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:22:11,195 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:22:11,269 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nlxn6e1qcnckx|586843bc, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nlxn6e1qcnckx|586843bc, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 23:22:11,664 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:22:12,163 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:22:12,179 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:22:30,432 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:22:30,443 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:22:30,444 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:22:30,451 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:22:30,534 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:22:30,535 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:22:30,535 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:22:30,534 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:22:30,537 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:22:30,539 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:22:30,550 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:22:30,563 INFO [http-nio-8080-exec-6] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:28:57,878 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 23:28:57,900 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 23:29:08,988 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:29:08,988 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:29:08,990 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:29:08,990 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:29:08,990 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:29:08,990 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:29:09,005 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:29:09,005 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:29:09,006 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:29:09,062 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nm6hwlw6x4d3|1515f782, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nm6hwlw6x4d3|1515f782, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 23:29:09,388 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:29:09,993 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:29:10,003 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:29:13,006 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:29:13,021 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:29:13,022 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:29:13,028 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:29:13,135 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:29:13,137 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:29:13,137 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:29:13,140 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:29:13,141 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:29:13,141 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:29:13,144 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:29:13,157 INFO [http-nio-8080-exec-7] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:36:36,432 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 23:36:36,452 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 23:36:41,967 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:36:41,967 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:36:41,968 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:36:41,969 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:36:41,970 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:36:41,970 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:36:41,983 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:36:41,984 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:36:41,984 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:36:42,054 INFO [http-nio-8080-exec-2] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nmgbq7gdmgih|6e5f5478, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nmgbq7gdmgih|6e5f5478, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 23:36:42,255 INFO [http-nio-8080-exec-3] com.Hairo.service.impl.PublicServiceImpl.getHotArticle(45) | 从redis获取热门文章
2019-04-25 23:36:42,382 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:36:42,900 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:36:42,902 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(52) | 返回内容 : 
2019-04-25 23:40:56,670 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 23:40:56,699 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 23:41:07,177 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 23:41:07,178 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:41:07,179 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:41:07,252 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nmlwj7segukn|25ae1f80, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nmlwj7segukn|25ae1f80, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 23:41:08,292 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : 38
2019-04-25 23:41:08,449 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 23:41:08,450 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:41:08,451 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:41:08,494 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_tit........(内容过多)
2019-04-25 23:41:08,514 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:41:08,514 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:41:08,515 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:41:08,516 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:41:08,517 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:41:08,519 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:41:08,542 INFO [http-nio-8080-exec-4] com.Hairo.service.impl.PublicServiceImpl.getHotArticle(45) | 从redis获取热门文章
2019-04-25 23:41:08,551 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.b........(内容过多)
2019-04-25 23:41:08,566 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:43:16,214 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 23:43:16,215 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:43:16,216 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:43:16,227 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : 38
2019-04-25 23:43:16,251 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 23:43:16,251 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:43:16,252 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:43:16,266 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_tit........(内容过多，只显示200个字符)
2019-04-25 23:43:16,347 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:43:16,348 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:43:16,349 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:43:16,348 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:43:16,355 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:43:16,356 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:43:16,359 INFO [http-nio-8080-exec-5] com.Hairo.service.impl.PublicServiceImpl.getHotArticle(45) | 从redis获取热门文章
2019-04-25 23:43:16,370 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:43:16,372 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.b........(内容过多，只显示200个字符)
2019-04-25 23:44:18,457 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/10000/
2019-04-25 23:44:18,457 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:44:18,459 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:44:18,473 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.bo........(内容过多，只显示200个字符)
2019-04-25 23:44:18,490 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:44:18,492 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:44:18,493 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:44:18,514 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:44:18,517 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:44:18,520 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:44:18,521 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:44:18,533 INFO [http-nio-8080-exec-4] com.Hairo.service.impl.PublicServiceImpl.getHotArticle(45) | 
从redis获取热门文章
2019-04-25 23:44:18,549 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.b........(内容过多，只显示200个字符)
2019-04-25 23:49:40,031 INFO [main] com.mchange.v2.log.MLog.<clinit>(80) | MLog clients using log4j logging.
2019-04-25 23:49:40,053 INFO [main] com.mchange.v2.c3p0.C3P0Registry.banner(204) | Initializing c3p0-0.9.1.2 [built 21-May-2007 15:04:56; debug? true; trace: 10]
2019-04-25 23:50:14,769 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 23:50:14,771 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:50:14,771 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:50:14,852 INFO [http-nio-8080-exec-1] com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getPoolManager(462) | Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 3, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -> 1hgev41a2nmx4cu1p2f10y|7845b21a, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> com.mysql.jdbc.Driver, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, identityToken -> 1hgev41a2nmx4cu1p2f10y|7845b21a, idleConnectionTestPeriod -> 60, initialPoolSize -> 3, jdbcUrl -> jdbc:mysql://localhost:3306/hairo_db?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT%2B8&useSSL=false, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 1800000, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 10, maxStatements -> 1000, maxStatementsPerConnection -> 0, minPoolSize -> 2, numHelperThreads -> 3, numThreadsAwaitingCheckoutDefaultUser -> 0, preferredTestQuery -> null, properties -> {user=******, password=******}, propertyCycle -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, usesTraditionalReflectiveProxies -> false ]
2019-04-25 23:50:16,017 INFO [http-nio-8080-exec-1] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : 38
2019-04-25 23:50:16,176 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 23:50:16,177 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:50:16,177 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:50:16,228 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_tit........(内容过多，只显示200个字符)
2019-04-25 23:50:16,240 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:50:16,241 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:50:16,242 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:50:16,246 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:50:16,247 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:50:16,250 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:50:16,272 INFO [http-nio-8080-exec-4] com.Hairo.service.impl.PublicServiceImpl.outLogger(138) | 
******************************************从redis获取热门文章******************************************

2019-04-25 23:50:16,275 INFO [http-nio-8080-exec-4] com.Hairo.service.impl.PublicServiceImpl.outLogger(138) | 
******************************************从数据库中获取热门文章保存到Redis******************************************

2019-04-25 23:50:16,297 INFO [http-nio-8080-exec-4] com.Hairo.service.impl.PublicServiceImpl.outLogger(138) | 
******************************************从获取热门文章为空,重新从数据库中获取热门文章保存到redis******************************************

2019-04-25 23:50:16,305 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:50:16,309 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.b........(内容过多，只显示200个字符)
2019-04-25 23:52:18,565 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 23:52:18,565 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:52:18,566 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:52:18,586 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : 38
2019-04-25 23:52:18,614 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 23:52:18,615 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:52:18,616 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:52:18,662 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_tit........(内容过多，只显示200个字符)
2019-04-25 23:52:18,748 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:52:18,749 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:52:18,750 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:52:18,752 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:52:18,754 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:52:18,750 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:52:18,770 INFO [http-nio-8080-exec-5] com.Hairo.service.impl.PublicServiceImpl.outLogger(140) | 
******************************************从数据库中获取热门文章保存到Redis******************************************

2019-04-25 23:52:18,779 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:52:18,788 INFO [http-nio-8080-exec-5] com.Hairo.service.impl.PublicServiceImpl.outLogger(140) | 
******************************************从获取热门文章为空,重新从数据库中获取热门文章保存到redis******************************************

2019-04-25 23:52:18,801 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.b........(内容过多，只显示200个字符)
2019-04-25 23:55:03,047 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 23:55:03,047 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:55:03,047 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:55:03,060 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : 38
2019-04-25 23:55:03,081 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 23:55:03,082 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:55:03,083 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:55:03,113 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_tit........(内容过多，只显示200个字符)
2019-04-25 23:55:03,188 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:55:03,189 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:55:03,189 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:55:03,189 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:55:03,194 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:55:03,195 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:55:03,204 INFO [http-nio-8080-exec-5] com.Hairo.service.impl.PublicServiceImpl.outLogger(138) | 
******************************************重新从数据库中获取热门文章保存到redis******************************************

2019-04-25 23:55:03,205 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:55:03,219 INFO [http-nio-8080-exec-5] com.Hairo.service.impl.PublicServiceImpl.outLogger(138) | 
******************************************从redis获取热门文章******************************************

2019-04-25 23:55:03,224 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.b........(内容过多，只显示200个字符)
2019-04-25 23:56:19,807 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/count/
2019-04-25 23:56:19,808 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:56:19,809 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:56:19,816 INFO [http-nio-8080-exec-3] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : 38
2019-04-25 23:56:19,849 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/page/1/
2019-04-25 23:56:19,850 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:56:19,851 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:56:19,864 INFO [http-nio-8080-exec-4] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10036, a_title='测试34', a_pubDate=Thu Apr 18 16:39:07 CST 2019, a_content='测试内容', u_name='海羅', a_browseCount=0, a_commentCount=0, a_likeCount=0, l_name='大数据'}, Articles{a_id=10035, a_tit........(内容过多，只显示200个字符)
2019-04-25 23:56:19,940 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/label/
2019-04-25 23:56:19,941 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:56:19,943 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:56:19,950 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(35) | URL : http://192.168.0.102:8080/api/article/hot/
2019-04-25 23:56:19,952 INFO [http-nio-8080-exec-2] com.Hairo.util.aop.LogAspect.doAfterReturning(59) | 返回内容 : [Label{l_name='HTML', l_count=1}, Label{l_name='JAVA', l_count=32}, Label{l_name='JQUERY', l_count=2}, Label{l_name='大数据', l_count=1}, Label{l_name='数据结构', l_count=1}, Label{l_name='设计模式', l_count=1}]
2019-04-25 23:56:19,957 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(36) | HTTP_METHOD : GET
2019-04-25 23:56:19,958 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doBefore(37) | IP : 192.168.0.102
2019-04-25 23:56:19,964 INFO [http-nio-8080-exec-5] com.Hairo.service.impl.PublicServiceImpl.outLogger(138) | 
******************************************从redis获取热门文章******************************************

2019-04-25 23:56:19,971 INFO [http-nio-8080-exec-5] com.Hairo.util.aop.LogAspect.doAfterReturning(57) | 返回内容 : [Articles{a_id=10000, a_title='海羅博客测试', a_pubDate=Thu Apr 11 13:28:22 CST 2019, a_content='```java
package com.Hairo;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.b........(内容过多，只显示200个字符)
